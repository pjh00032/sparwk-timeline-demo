{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","onAddTimeLine","time","today","Date","date","addDay","color","isNaN","state","inputText","alert","newEvents","num","setTime","getTime","setDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","push","dateString","event","events","setState","concat","onInputTextChange","e","target","value","onInputMaxLengthCheck","length","maxLength","slice","addDateComment","style","height","type","this","onChange","onInput","onClick","className","fontFamily","layout","icon","iconStyle","background","width","left","borderRadius","lineHeight","map","dangerouslySetInnerHTML","__html","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4084f825.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\nimport { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';\nexport { RiHeart3Fill } from 'react-icons/ri';\n\n/**\n *\n * */\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            events : [{\n                date : \"22/09/2017\", /*기준일*/\n                dateString: \"22/09/2017 11:00:11\", /*입력된 시간*/\n                event: \"start timeline\", /*코멘트*/\n                color : \"#fcd804\" /*아이콘 색상*/\n            }\n            ],\n            inputText : 0 /*input text value*/\n        }\n\n    }\n\n    /*\n     * 타임라인 항목 추가\n     * : input 태그에 입력된 수만큼 timeline 추가\n     * 1) 홀수 : 초록색 / 짝수 : 노란색 으로 생성\n     * */\n    onAddTimeLine = () => {\n        let time = null;\n        let today = new Date();\n        let date = ''; /*기준일*/\n        let addDay = '';\n        let color = '';\n\n        //입력한 값이 숫자일때만 동작\n        if(!isNaN(this.state.inputText)){\n            let newEvents = []; //추가할 timeline\n            let num = 1;\n\n            while(num<=this.state.inputText) {\n                if(num%2 === 0){\n                    //노란색\n                    color = \"#fcd804\";\n                    time = new Date(today.setTime(today.getTime()+1));\n                }\n                else\n                {\n                    //초록색\n                    color = \"#0aaf0c\";\n                    time = new Date(today.setDate(today.getDate()+1));\n                }\n\n                date = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear();\n                addDay = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear() + \" \" + time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds() + \":\" + time.getMilliseconds();\n\n                newEvents.push({\n                    date : date,\n                    dateString: addDay,\n                    event: num,\n                    color: color\n                })\n\n                num++;\n            }\n\n\n            //적용\n            const { events } = this.state;\n            this.setState({\n                events: events.concat(newEvents)\n            })\n        }else\n        {\n            alert(\"숫자를 입력해주시기 바랍니다.\");\n        }\n    }\n\n    //input text onChange Evnet\n    onInputTextChange = (e) => {\n        this.setState({inputText : e.target.value})\n    }\n\n    //input text Max Length Check text\n    onInputMaxLengthCheck= (e) => {\n        if (e.target.value.length > e.target.maxLength){\n            e.target.value = e.target.value.slice(0, e.target.maxLength);\n        }\n    }\n\n    render() {\n        let addDateComment = \"12/8/2021\"; /*시작 기준일*/\n\n        return (\n            <div>\n                {/**timeline 추가 input************************************************************************************************************************/}\n                <div style={{height:100}}>\n                    <span>\n                        Enter the number to add of timeline :&nbsp;\n                    </span>\n\n                    <input type={\"number\"} value = {this.state.inputText} onChange={this.onInputTextChange} maxLength={5} onInput={this.onInputMaxLengthCheck}/>\n                    &nbsp;\n                    <button onClick={this.onAddTimeLine}> add timeline </button>\n                </div>\n\n                {/**timeline 표출*******************************************************************************************************************************/}\n                <div\n                    className=\"App\"\n                    style={{ fontFamily: \"Trebuchet Ms\" }}\n                >\n                    <h1>Timeline Test</h1>\n                    <VerticalTimeline layout=\"1-column\">\n                        <VerticalTimelineElement\n                            icon={ <div>Waiting to accept</div> }\n                            iconStyle={{ background: \"#fcd804\", width:120, left:-42, borderRadius:2, height:25, lineHeight:2 }}\n                        >\n                            <h3>가나다라</h3>\n\n                        </VerticalTimelineElement>\n\n                        {this.state.events.map((event) => {\n\n                            //기준일이 같으면 timeline만 추가\n                            if(addDateComment === event.date){\n                                return (\n                                    <VerticalTimelineElement\n                                        date={event.date}\n                                        icon={ <div></div> }\n                                        iconStyle={{ background: event.color}}\n                                    >\n                                        <h3\n                                            className=\"vertical-timeline-element-title\"\n                                            dangerouslySetInnerHTML={{ __html: event.event }}\n                                        />\n                                        <button\n                                            onClick={function () {\n                                                alert(event.date);\n                                            }}\n                                        >show date</button>\n                                    </VerticalTimelineElement>\n                                )\n                            }\n                            else //기준일이 다르면, 기준일 추가, timeline 추가\n                            {\n                                addDateComment = event.date;\n                                return (\n                                    <div>\n                                        <VerticalTimelineElement\n                                            icon={ <div>{event.date}</div> }\n                                            iconStyle={{ background: \"#a1a1a0\", color:\"#ffffff\", width:120, left:-42, borderRadius:2, height:25, lineHeight:2 }}\n                                        >\n                                        </VerticalTimelineElement>\n                                        <VerticalTimelineElement\n                                            date={event.dateString}\n                                            icon={ <div></div> }\n                                            iconStyle={{ background: event.color}}\n                                        >\n                                            <h3\n                                                className=\"vertical-timeline-element-title\"\n                                                dangerouslySetInnerHTML={{ __html: event.event }}\n                                            />\n                                            <button\n                                                onClick={function () {\n                                                    alert(event.dateString);\n                                                }}\n                                            >show date</button>\n                                        </VerticalTimelineElement>\n                                    </div>\n                                )\n\n                            }\n                        })}\n\n                    </VerticalTimeline>\n                </div>\n            </div>\n\n        )\n    }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}