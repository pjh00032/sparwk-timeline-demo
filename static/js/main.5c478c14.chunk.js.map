{"version":3,"sources":["App.js","index.js"],"names":["App","props","onAddTimeLine","time","today","Date","date","addDay","color","isNaN","state","inputText","alert","newEvents","num","setTime","getTime","setDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","push","dateString","event","events","setState","concat","onScrollAddTimeLine","addNumber","onInputTextChange","e","target","value","onInputMaxLengthCheck","length","maxLength","slice","fetchMoreData","hasMore","setTimeout","this","addDateComment","className","style","fontFamily","layout","dataLength","next","loader","height","endMessage","textAlign","map","icon","iconStyle","background","left","dangerouslySetInnerHTML","__html","onClick","width","borderRadius","lineHeight","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c478c14.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\nimport { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nexport { RiHeart3Fill } from 'react-icons/ri';\n\n/**\n *\n * */\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            events : [{\n                date : \"22/09/2017\", /*기준일*/\n                dateString: \"22/09/2017 11:00:11\", /*입력된 시간*/\n                event: \"timeline(material ui) + infinite scroll(react-infinite-scroll-component)\", /*코멘트*/\n                color : \"#fcd804\" /*아이콘 색상*/\n            }\n            ],\n            inputText : 0 /*input text value*/\n            , hasMore: true\n        }\n    }\n\n    componentDidMount(){\n        this.onScrollAddTimeLine(5);\n    }\n\n    /*\n     * 타임라인 항목 추가\n     * : input 태그에 입력된 수만큼 timeline 추가\n     * 1) 홀수 : 초록색 / 짝수 : 노란색 으로 생성\n     * */\n    onAddTimeLine = () => {\n        let time = null;\n        let today = new Date();\n        let date = ''; /*기준일*/\n        let addDay = '';\n        let color = '';\n\n        //입력한 값이 숫자일때만 동작\n        if(!isNaN(this.state.inputText)){\n            let newEvents = []; //추가할 timeline\n            let num = 1;\n\n            while(num<=this.state.inputText) {\n                if(num%2 === 0){\n                    //노란색\n                    color = \"#fcd804\";\n                    time = new Date(today.setTime(today.getTime()+1));\n                }\n                else\n                {\n                    //초록색\n                    color = \"#0aaf0c\";\n                    time = new Date(today.setDate(today.getDate()+1));\n                }\n\n                date = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear();\n                addDay = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear() + \" \" + time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds() + \":\" + time.getMilliseconds();\n\n                newEvents.push({\n                    date : date,\n                    dateString: addDay,\n                    event: num,\n                    color: color\n                })\n\n                num++;\n            }\n\n\n            //적용\n            const { events } = this.state;\n            this.setState({\n                events: events.concat(newEvents)\n            })\n        }else\n        {\n            alert(\"숫자를 입력해주시기 바랍니다.\");\n        }\n    }\n\n    onScrollAddTimeLine = (addNumber) => {\n        let time = null;\n        let today = new Date();\n        let date = ''; /*기준일*/\n        let addDay = '';\n        let color = '';\n\n        //입력한 값이 숫자일때만 동작\n        if(!isNaN(addNumber)){\n            let newEvents = []; //추가할 timeline\n            let num = 1;\n\n            while(num<=addNumber) {\n                if(num%2 === 0){\n                    //노란색\n                    color = \"#fcd804\";\n                    time = new Date(today.setTime(today.getTime()+1));\n                }\n                else\n                {\n                    //초록색\n                    color = \"#0aaf0c\";\n                    time = new Date(today.setDate(today.getDate()+1));\n                }\n\n                date = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear();\n                addDay = time.getDate() + \"/\" + (time.getMonth()+1) + \"/\" + time.getFullYear() + \" \" + time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds() + \":\" + time.getMilliseconds();\n\n                newEvents.push({\n                    date : date,\n                    dateString: addDay,\n                    event: num,\n                    color: color\n                })\n\n                num++;\n            }\n\n\n            //적용\n            const { events } = this.state;\n            this.setState({\n                events: events.concat(newEvents)\n            })\n        }else\n        {\n            alert(\"숫자를 입력해주시기 바랍니다.\");\n        }\n    }\n\n    //input text onChange Evnet\n    onInputTextChange = (e) => {\n        this.setState({inputText : e.target.value})\n    }\n\n    //input text Max Length Check text\n    onInputMaxLengthCheck= (e) => {\n        if (e.target.value.length > e.target.maxLength){\n            e.target.value = e.target.value.slice(0, e.target.maxLength);\n        }\n    }\n\n    fetchMoreData = () => {\n        if (this.state.events.length >= 100) {\n          this.setState({ hasMore: false });\n          return;\n        }\n        // a fake async api call like which sends\n        // 20 more records in .5 secs\n        setTimeout(() => {\n            this.onScrollAddTimeLine(20);\n        }, 500);\n      };\n\n    render() {\n        let addDateComment = \"12/8/2021\"; /*시작 기준일*/\n\n        return (\n            <div>\n                {/**timeline 추가 input************************************************************************************************************************/}\n                {/* <div style={{height:100}}>\n                    <span>\n                        Enter the number to add of timeline :&nbsp;\n                    </span>\n\n                    <input type={\"number\"} value = {this.state.inputText} onChange={this.onInputTextChange} maxLength={5} onInput={this.onInputMaxLengthCheck}/>\n                    &nbsp;\n                    <button onClick={this.onAddTimeLine}> add timeline </button>\n                </div> */}\n\n                {/**timeline 표출*******************************************************************************************************************************/}\n                <div\n                    className=\"App\"\n                    style={{ fontFamily: \"Trebuchet Ms\" }}\n                >\n                    <h1>Timeline Test</h1>\n                    <VerticalTimeline layout=\"1-column\">\n                        <InfiniteScroll\n                            dataLength={this.state.events.length}\n                            next={this.fetchMoreData}\n                            hasMore={this.state.hasMore}\n                            loader={<h4>Loading...</h4>}\n                            height={850}\n                            endMessage={\n                            <p style={{ textAlign: \"center\" }}>\n                                <b>Yay! You have seen it all</b>\n                            </p>\n                            }\n                        >\n                            {this.state.events.map((event) => {\n\n                                //기준일이 같으면 timeline만 추가\n                                if(addDateComment === event.date){\n                                    return (\n                                        <VerticalTimelineElement\n                                            date={event.date}\n                                            icon={ <div></div> }\n                                            iconStyle={{ background: event.color, left:45}}\n                                        >\n                                            <h3\n                                                className=\"vertical-timeline-element-title\"\n                                                dangerouslySetInnerHTML={{ __html: event.event }}\n                                            />\n                                            <button\n                                                onClick={function () {\n                                                    alert(event.date);\n                                                }}\n                                            >show date</button>\n                                        </VerticalTimelineElement>\n                                    )\n                                }\n                                else //기준일이 다르면, 기준일 추가, timeline 추가\n                                {\n                                    addDateComment = event.date;\n                                    return (\n                                        <div>\n                                            <VerticalTimelineElement\n                                                icon={ <div>{event.date}</div> }\n                                                iconStyle={{ background: \"#a1a1a0\", color:\"#ffffff\", width:120, borderRadius:2, height:25, lineHeight:2 }}\n                                            >\n                                            </VerticalTimelineElement>\n                                            <VerticalTimelineElement\n                                                date={event.dateString}\n                                                icon={ <div></div> }\n                                                iconStyle={{ background: event.color, left:45}}\n                                            >\n                                                <h3\n                                                    className=\"vertical-timeline-element-title\"\n                                                    dangerouslySetInnerHTML={{ __html: event.event }}\n                                                />\n                                                <button\n                                                    onClick={function () {\n                                                        alert(event.dateString);\n                                                    }}\n                                                >show date</button>\n                                            </VerticalTimelineElement>\n                                        </div>\n                                    )\n\n                                }\n                                })}\n                        </InfiniteScroll>\n\n                    </VerticalTimeline>\n                </div>\n            </div>\n\n        )\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}